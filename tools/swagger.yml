swagger: '2.0'
info:
  description: | 
    API for task2trip. For some methods (for example create task) you need athurization. For auhtorization of your request in server you need to add header Authorization: Bearer <authToken>
  version: 1.0.0
  title: Task2Trip API
  contact:
    email: ilya.ufo@gmail.com

paths:
  /task:
    get:
      tags:
        - tasks
      summary: search for tasks according to filters
      operationId: searchTasks
      description: |
        By passing in the appropriate options, you can search for available tasks.
        Unauthorized user can only view all tasks. For authorized user you can specify userId and get only tasks created by user with id=userId
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: auth token
          type: string
        - in: query
          name: searchString
          description: pass an optional search string for looking up tasks
          required: false
          type: string
        - in: query
          name: userId
          required: false
          type: string
        - in: query
          name: categoryId
          required: false
          type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          type: integer
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          minimum: 0
          maximum: 100
      responses:
        200:
          description: search results matching criteria
          schema:
            $ref: '#/definitions/TaskPage'
        400:
          description: bad input parameter

    put:
      tags:
        - tasks
      security:
        - AuthToken: []
      summary: adds a task
      operationId: createTask
      description: Creates new task
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: task
          description: Task item to add
          schema:
            $ref: '#/definitions/TaskCreateParams'
      responses:
        201:
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
        400:
          description: invalid input, object invalid

  /task/{taskId}/offer:
    put:
      tags:
        - offers
      security:
        - AuthToken: []
      summary: create offer
      description: user can't create offer for his own task. Also single user can't create multiple offers for single task
      operationId: createOffer
      parameters:
        - in: path
          name: taskId
          type: string
          required: true
        - in: body
          name: offer
          description: offer to create
          schema:
            type: object
            properties:
              comment:
                type: string
              price:
                type: integer
            required:
              - price
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        200:
          description: created offer
          schema:
            $ref: '#/definitions/Offer'
    get:
      tags:
        - offers
      security:
        - AuthToken: []
      summary: get offers for task
      description: returns list of offers for task. For task owner will be returned all offers for tasks, for others only their own offer for this task if any
      operationId: listTaskOffers
      parameters:
        - in: path
          name: taskId
          type: string
          required: true
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        200:
          description: list of offers
          schema:
            type: array
            items:
              $ref: '#/definitions/Offer'

  /category:
    get:
      tags:
        - categories
      summary: get list of categories
      operationId: listCategories
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        200:
          description: list of categories
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'

  /user/login:
    post:
      tags:
        - users
      summary: users login
      operationId: userLogin
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: credentials
          description: user's email and password
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
            required:
              - email
              - password
      responses:
        200:
          description: list of categories
          schema:
            type: object
            properties:
              authToken:
                type: string

  /user:
    post:
      tags:
        - users
      summary: user sign up
      operationId: userSignup
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          schema:
            $ref: '#/definitions/UserCreateParams'
      responses:
        200:
          description: user
          schema:
            $ref: '#/definitions/User'

    get:
      tags:
        - users
      security:
        - AuthToken: []
      summary: get current user
      operationId: currentUser
      produces:
        - application/json
      responses:
        200:
          description: user
          schema:
            $ref: '#/definitions/User'

  /about:
    get:
      tags:
        - misc
      summary: hello
      operationId: about
      produces:
        - application/json
      responses:
        200:
          description: hello
          schema:
            type: string

securityDefinitions:
  AuthToken:
    type: apiKey
    in: header
    name: Authorization

definitions:
  TaskCreateParams:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
        description: more detailed description of the task
      categoryId:
        type: string
      budgetEstimate:
        type: integer
        description: budget estimate that traveller expect to spend on this task
        example: 100
    required:
      - name
      - categoryId
      - description
      - budgetEstimate

  UserCreateParams:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password

  Task:
    type: object
    required:
      - id
      - name
      - description
      - category
      - budgetEstimate
    properties:
      id:
        type: string
      name:
        type: string
        example: Buy a vodka
      description:
        type: string
        example: 40 degrees
      createTime:
        type: string
        format: date-time
      budgetEstimate:
        type: integer
      category:
        $ref: '#/definitions/Category'

  TaskPage:
    type: object
    properties:
      payload:
        type: array
        items:
          $ref: '#/definitions/Task'
      total:
        type: integer

  Category:
    required:
      - key
      - id
    properties:
      id:
        type: string
      key:
        type: string
        example: names.category.name.guide
      defaultValue:
        type: string

  User:
    required:
      - name
      - id
    properties:
      id:
        type: string
      name:
        type: string
        example: Ivan Petrov

  Offer:
    required:
      - price
      - user
      - id
    properties:
      id:
        type: string
      comment:
        type: string
      price:
        type: integer
      user:
        $ref: '#/definitions/User'

host: "somehost.ru"
schemes:
  - http
basePath: "/api/v1"